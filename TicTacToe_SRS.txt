TicTacToe

Overview
- Know (clarify few points, explains understandings and functionalities, ask for anything adds up that i dont know)
- Dont know

To ask question -
	- entity design of software system ()
	- persist the data or use inmemory (input -main/ hardcode)
	- real time data or DB


1) Requirements

- Size of board - n*n
- Numbers of players - n-1 players
- Every Player can choose their own symbol (can two player have same symbol?)
		-- Builder Design Pattern
- Will bot playing games? => yes
- Bots have different difficulties
- Only 1 bot in game
- Who will make first move? => random
- How is winner going to decide? => game should be extensible, user will choose 
	1. All columns of particular row has same symbol
	2. All rows of particular columns has same symbol
	3. All corners have same symbol
		-- Strategt Design Pattern (different ways to do this)
 				    	
- Game ends when we have winner or draw
- No exit in between
- Undo functionality(Global undo button)(anyone can press it no. of times)(undo whatever is last move)
					-leaderboard
					-tournaments
					-pause/resume/reset
					-timer
					-Replay
					-some cells are blocked (some additional feature)


Can you quickly differentiate between class diagram and schema design, beacause sometimes it gets confusing while thinking which attribute should consider, mostly ending up messed by mixing both ideas of classes and tables? and How ENUM and design pattern should be mentioned in class diagram?

2) *Enitity Classes - atrributes

*ParkingLot - Address, EntryGate, ExitGate, Status, AllowedVehicleTypes, FeeCalculatorStrategy, SlotAllocationStrategy, List<Users>
*ParkingFloor - ParkingSlots, FloorNumber, Status 
*Gate - Id, Type, GateNUmber, Status, Operator
*ParkingSlot - VehicleType, Status, SlotNumber, Floor
*Vehicle - VehicleNumber, VehicleType, VehicleOwner
*Operator - Id, EmpId, Name
*Token - TokenNumber, EntryTime, Vehicle, ParkingSlot, Gate, Operator
*Bill - Id, ExitTime, Token, Gate, Operator, Amount, Status, FeeCalculatorStrategy, List<Payment>
*Payment - PaymentMode, Amount, Time, Status, ReferenceNumber
 


3) Schema design //remaining
#tableName - column_names

#parking_lot - id, parking_lot_status_id

#parking_floors - id, floor_number, parking_lot_id

#gates - id, number, parking_lot_id

#parking_slots - id, number,

#vehicles - id, number,

#operators - id, emp_id, name

#bills - id, exit_time, amount

#payments - id, time, amount, reference_number

#tickets - id, entry_time, number

------------------
*#Enum - values

*#parking_lot_status - id, value
*#vehicle_types - 
*#allowed_vehicle_types - id, value

